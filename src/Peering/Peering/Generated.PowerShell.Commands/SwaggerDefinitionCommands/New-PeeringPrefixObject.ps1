<#
Code generated by Microsoft (R) PSSwagger 0.3.0
Changes may cause incorrect behavior and will be lost if the code is regenerated.
#>

<#
.SYNOPSIS
    The peering prefix class.

.DESCRIPTION
    The peering prefix class.

.PARAMETER ProvisioningState
    Gets or sets the provisioning state.

.PARAMETER Id
    Gets or sets the resource id.

.PARAMETER Type
    Gets or sets the resource type.

.PARAMETER Prefix
    Gets or sets the prefix.

.PARAMETER Tags
    Gets or sets the tags.

.PARAMETER ETag
    Gets or sets the entity tag.

.PARAMETER Name
    Gets or sets the resource name.

.PARAMETER Location
    Gets or sets the location.

.PARAMETER ValidationState
    Gets or sets the prefix validation state.

.PARAMETER LearnedType
    Gets or sets the prefix path.

#>
function New-PeeringPrefixObject
{
    param(    
        [Parameter(Mandatory = $false)]
        [ValidateSet('Succeeded', 'Updating', 'Deleting', 'Failed')]
        [string]
        $ProvisioningState,
    
        [Parameter(Mandatory = $false)]
        [string]
        $Id,
    
        [Parameter(Mandatory = $false)]
        [string]
        $Type,
    
        [Parameter(Mandatory = $false)]
        [string]
        $Prefix,
    
        [Parameter(Mandatory = $false)]
        [System.Collections.Generic.Dictionary[[string],[string]]]
        $Tags,
    
        [Parameter(Mandatory = $false)]
        [string]
        $ETag,
    
        [Parameter(Mandatory = $false)]
        [string]
        $Name,
    
        [Parameter(Mandatory = $false)]
        [string]
        $Location,
    
        [Parameter(Mandatory = $false)]
        [ValidateSet('None', 'Invalid', 'Verified', 'Failed', 'Pending', 'Unknown')]
        [string]
        $ValidationState,
    
        [Parameter(Mandatory = $false)]
        [ValidateSet('None', 'ViaPartner', 'ViaSession')]
        [string]
        $LearnedType
    )
    
    $Object = New-Object -TypeName Microsoft.PowerShell.AzPeering.v001.Models.PeeringPrefix

    $PSBoundParameters.GetEnumerator() | ForEach-Object { 
        if(Get-Member -InputObject $Object -Name $_.Key -MemberType Property)
        {
            $Object.$($_.Key) = $_.Value
        }
    }

    if(Get-Member -InputObject $Object -Name Validate -MemberType Method)
    {
        $Object.Validate()
    }

    return $Object
}
