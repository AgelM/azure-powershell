// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.PowerShell.Cmdlets.Peering.Common.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The peering subscriber class.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PSPeeringSubscriber
    {
        /// <summary>
        /// Initializes a new instance of the PSPeeringSubscriber class.
        /// </summary>
        public PSPeeringSubscriber()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PSPeeringSubscriber class.
        /// </summary>
        /// <param name="serviceTag">Gets or sets the service tag.</param>
        /// <param name="prefixesProperty">Gets or sets the list of
        /// prefixes.</param>
        /// <param name="peeringLocation">Gets or sets the peering
        /// location.</param>
        /// <param name="peeringState">Gets or sets the peering state. Possible
        /// values include: 'None', 'Active', 'PendingAdd', 'PendingUpdate',
        /// 'PendingConversion', 'PendingRemove', 'ProvisioningStarted',
        /// 'ProvisioningCompleted', 'ProvisioningFailed', 'Removed',
        /// 'CarrierApproved'</param>
        /// <param name="provisioningState">Gets or sets the provisioning
        /// state. Possible values include: 'Succeeded', 'Updating',
        /// 'Deleting', 'Failed'</param>
        /// <param name="name">Gets or sets the resource name.</param>
        /// <param name="id">Gets or sets the resource id.</param>
        /// <param name="type">Gets or sets the resource type.</param>
        /// <param name="location">Gets or sets the location.</param>
        /// <param name="eTag">Gets or sets the entity tag.</param>
        /// <param name="tags">Gets or sets the tags.</param>
        public PSPeeringSubscriber(string serviceTag = default(string), IList<PSPeeringPrefixProperties> prefixesProperty = default(IList<PSPeeringPrefixProperties>), string peeringLocation = default(string), string peeringState = default(string), string provisioningState = default(string), string name = default(string), string id = default(string), string type = default(string), string location = default(string), string eTag = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            ServiceTag = serviceTag;
            PrefixesProperty = prefixesProperty;
            PeeringLocation = peeringLocation;
            PeeringState = peeringState;
            ProvisioningState = provisioningState;
            Name = name;
            Id = id;
            Type = type;
            Location = location;
            ETag = eTag;
            Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the service tag.
        /// </summary>
        [JsonProperty(PropertyName = "properties.serviceTag")]
        public string ServiceTag { get; set; }

        /// <summary>
        /// Gets or sets the list of prefixes.
        /// </summary>
        [JsonProperty(PropertyName = "properties.prefixes")]
        public IList<PSPeeringPrefixProperties> PrefixesProperty { get; set; }

        /// <summary>
        /// Gets or sets the peering location.
        /// </summary>
        [JsonProperty(PropertyName = "properties.peeringLocation")]
        public string PeeringLocation { get; set; }

        /// <summary>
        /// Gets or sets the peering state. Possible values include: 'None',
        /// 'Active', 'PendingAdd', 'PendingUpdate', 'PendingConversion',
        /// 'PendingRemove', 'ProvisioningStarted', 'ProvisioningCompleted',
        /// 'ProvisioningFailed', 'Removed', 'CarrierApproved'
        /// </summary>
        [JsonProperty(PropertyName = "properties.peeringState")]
        public string PeeringState { get; set; }

        /// <summary>
        /// Gets or sets the provisioning state. Possible values include:
        /// 'Succeeded', 'Updating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets the resource name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or sets the resource id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or sets the resource type.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or sets the location.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the entity tag.
        /// </summary>
        [JsonProperty(PropertyName = "eTag")]
        public string ETag { get; set; }

        /// <summary>
        /// Gets or sets the tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

    }
}
